{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akash Jain\\\\Desktop\\\\MERN\\\\client\\\\src\\\\components\\\\profiles\\\\Profiles.js\";\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport { getProfiles } from '../../actions/profile';\nimport profile from '../../reducers/profile';\n\nconst Profiles = ({\n  getProfiles,\n  profile: {\n    profiles,\n    loading\n  }\n}) => {\n  useEffect(() => {\n    getProfiles();\n  }, []);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, loading ? /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 25\n    }\n  }) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"large text-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 20\n    }\n  }, \"Developers\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"leads\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 20\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fab fa-connectdevelop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 24\n    }\n  }), \"Browse and Connect with the Developer\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"profiles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 20\n    }\n  }, profiles.length > 0 ? profiles.map(profile => /*#__PURE__*/React.createElement(ProfileItem, {\n    key: profile._id,\n    profile: profile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 38\n    }\n  })) : /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 33\n    }\n  }, \"No Profile found\"))));\n};\n\nProfiles.propTypes = {\n  getProfiles: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getProfiles\n})(Profiles);","map":{"version":3,"sources":["C:/Users/Akash Jain/Desktop/MERN/client/src/components/profiles/Profiles.js"],"names":["React","Fragment","useEffect","PropTypes","connect","Spinner","getProfiles","profile","Profiles","profiles","loading","length","map","_id","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAQC,OAAR,MAAqB,mBAArB;AACA,SAAQC,WAAR,QAA2B,uBAA3B;AACA,OAAOC,OAAP,MAAoB,wBAApB;;AAKA,MAAMC,QAAQ,GAAG,CAAE;AAACF,EAAAA,WAAD;AAAaC,EAAAA,OAAO,EAAC;AAACE,IAAAA,QAAD;AAAUC,IAAAA;AAAV;AAArB,CAAF,KAAgD;AAE/DR,EAAAA,SAAS,CAAC,MAAI;AACRI,IAAAA,WAAW;AAEhB,GAHQ,EAGP,EAHO,CAAT;AAOE,sBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMI,OAAO,gBAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,gBACN,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAG,IAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,SAAS,EAAC,uBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,0CAFJ,eAMI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQD,QAAQ,CAACE,MAAT,GAAkB,CAAlB,GACIF,QAAQ,CACRG,GADA,CACIL,OAAO,iBACL,oBAAC,WAAD;AAAa,IAAA,GAAG,EAAEA,OAAO,CAACM,GAA1B;AAA+B,IAAA,OAAO,EAAEN,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFN,CADJ,gBAQK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAVb,CANJ,CAFP,CADJ;AA8BH,CAvCD;;AAyCAC,QAAQ,CAACM,SAAT,GAAqB;AACjBR,EAAAA,WAAW,EAACH,SAAS,CAACY,IAAV,CAAeC,UADV;AAEjBT,EAAAA,OAAO,EAACJ,SAAS,CAACc,MAAV,CAAiBD;AAFR,CAArB;;AAIA,MAAME,eAAe,GAACC,KAAK,KAAI;AAC3BZ,EAAAA,OAAO,EAAEY,KAAK,CAACZ;AADY,CAAJ,CAA3B;;AAIA,eAAeH,OAAO,CAACc,eAAD,EAAiB;AAACZ,EAAAA;AAAD,CAAjB,CAAP,CAAuCE,QAAvC,CAAf","sourcesContent":["import React, {Fragment, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport  Spinner from '../layout/Spinner';\r\nimport {getProfiles } from '../../actions/profile';\r\nimport profile from '../../reducers/profile';\r\n\r\n\r\n\r\n\r\nconst Profiles = ( {getProfiles,profile:{profiles,loading}} ) => {\r\n\r\n  useEffect(()=>{\r\n        getProfiles();\r\n    \r\n  },[]) \r\n\r\n \r\n\r\n    return (\r\n        <Fragment>\r\n            { loading ? <Spinner/> : \r\n               <Fragment>\r\n                   <h1 className=\"large text-primary\">Developers</h1>\r\n                   <p className=\"leads\">\r\n                       <i className=\"fab fa-connectdevelop\"></i>Browse and Connect with the Developer\r\n                   </p>\r\n\r\n                   <div className=\"profiles\">\r\n                       {\r\n                           profiles.length > 0 ? (\r\n                               profiles.\r\n                               map(profile => (\r\n                                     <ProfileItem key={profile._id} profile={profile} />\r\n                                              )\r\n                                  )\r\n                                                 )\r\n                                            \r\n                               :<h4>No Profile found</h4>\r\n                           \r\n                       }\r\n                   </div>\r\n               \r\n               \r\n               </Fragment>\r\n    \r\n                }\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nProfiles.propTypes = {\r\n    getProfiles:PropTypes.func.isRequired,\r\n    profile:PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps=state =>({\r\n    profile: state.profile\r\n})\r\n\r\nexport default connect(mapStateToProps,{getProfiles})(Profiles);"]},"metadata":{},"sourceType":"module"}