{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL } from './types';\nimport setAuthToken from '../util/setAuthToken'; //login user\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //Login User\n\nexport const login = ({\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(\"error\");\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Akash Jain/Desktop/MERN/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","console","log"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { setAlert } from './alert';\r\nimport {\r\n     REGISTER_SUCCESS,\r\n     REGISTER_FAIL, \r\n     USER_LOADED,\r\n     AUTH_ERROR,\r\n     LOGIN_SUCCESS,\r\n     LOGIN_FAIL     \r\n} from './types';\r\nimport setAuthToken from '../util/setAuthToken';\r\n\r\n\r\n\r\n//login user\r\nexport const  loadUser = () => async dispatch =>{\r\n    \r\n    if(localStorage.token)\r\n    {\r\n        setAuthToken(localStorage.token);\r\n    }\r\n\r\n    try\r\n    {\r\n        const res = await axios.get('/api/');\r\n        dispatch({\r\n            type: USER_LOADED,\r\n            payload: res.data\r\n        })\r\n    }\r\n    catch(err)\r\n    {\r\n        dispatch({\r\n            type:AUTH_ERROR\r\n        })\r\n    }\r\n\r\n\r\n\r\n}\r\n// Register User\r\nexport const register = ({name, email, password}) => async dispatch =>{\r\n    const config = {\r\n        headers: {\r\n            'Content-Type':'application/json',\r\n        }\r\n    }\r\n\r\n    const body  = JSON.stringify({name,email,password});\r\n    \r\n    try \r\n    {\r\n         const res = await axios.post('/api/users',body, config);\r\n         \r\n         dispatch({\r\n             type: REGISTER_SUCCESS,\r\n             payload: res.data\r\n         });\r\n\r\n    }\r\n    catch(err)\r\n    {\r\n       const errors =  err.response.data.errors;\r\n       if(errors)\r\n       {\r\n           errors.forEach(error => dispatch(setAlert(error.msg,'danger')));\r\n       }\r\n        dispatch({\r\n            type: REGISTER_FAIL\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n//Login User\r\nexport const login = ({ email, password}) => async dispatch =>{\r\n    const config = {\r\n        headers: {\r\n            'Content-Type':'application/json',\r\n        }\r\n    }\r\n\r\n    const body  = JSON.stringify({email,password});\r\n    \r\n    try \r\n    {\r\n         const res = await axios.post('/api/auth',body, config);\r\n         \r\n         dispatch({\r\n             type: LOGIN_SUCCESS,\r\n             payload: res.data\r\n         });\r\n        \r\n         dispatch(loadUser());\r\n     }\r\n    catch(err)\r\n    {\r\n       const errors =  err.response.data.errors;\r\n       console.log(\"error\");\r\n       if(errors)\r\n       {\r\n           errors.forEach(error => dispatch(setAlert(error.msg,'danger')));\r\n       }\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        });\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}