{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akash Jain\\\\Desktop\\\\MERN\\\\client\\\\src\\\\components\\\\post\\\\Post.js\";\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport { getPost } from '../../actions/post';\nimport PostItem from '../posts/PostItem';\nimport CommentForm from './CommentForm';\nimport { Link } from 'react-router-dom';\n\nconst Post = ({\n  getPost,\n  post: {\n    post,\n    loading\n  },\n  match\n}) => {\n  console.log(post);\n  useEffect(() => {\n    getPost(match.params.id);\n  }, [getPost]);\n  return post != null ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/posts\",\n    className: \"btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 4\n    }\n  }, \"Back To Posts\"), /*#__PURE__*/React.createElement(PostItem, {\n    post: post,\n    showActions: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 4\n    }\n  })) : /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 19\n    }\n  });\n};\n\nPost.propTypes = {\n  getPost: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n};\n\nconst mapStatesToProps = state => ({\n  post: state.post\n});\n\nexport default connect(mapStatesToProps, {\n  getPost\n})(Post);","map":{"version":3,"sources":["C:/Users/Akash Jain/Desktop/MERN/client/src/components/post/Post.js"],"names":["React","Fragment","useEffect","PropTypes","connect","Spinner","getPost","PostItem","CommentForm","Link","Post","post","loading","match","console","log","params","id","propTypes","func","isRequired","object","mapStatesToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAiBC,QAAjB,EAA2BC,SAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,OAAR,QAAuB,aAAvB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEJ,EAAAA,OAAF;AAAYK,EAAAA,IAAI,EAAC;AAAEA,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAjB;AAAmCC,EAAAA;AAAnC,CAAD,KAAgD;AACzDC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAT,EAAAA,SAAS,CAAC,MAAK;AACXI,IAAAA,OAAO,CAACO,KAAK,CAACG,MAAN,CAAaC,EAAd,CAAP;AACH,GAFQ,EAEP,CAACX,OAAD,CAFO,CAAT;AAMD,SAAOK,IAAI,IAAE,IAAN,gBAAc,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACrB,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,QAAT;AAAkB,IAAA,SAAS,EAAC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADqB,eAIrB,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAIA,IAAlB;AAAyB,IAAA,WAAW,EAAI,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJqB,CAAd,gBAMQ,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANf;AAQF,CAhBD;;AAkBAD,IAAI,CAACQ,SAAL,GAAiB;AACbZ,EAAAA,OAAO,EAACH,SAAS,CAACgB,IAAV,CAAeC,UADV;AAEbT,EAAAA,IAAI,EAACR,SAAS,CAACkB,MAAV,CAAiBD;AAFT,CAAjB;;AAIA,MAAME,gBAAgB,GAACC,KAAK,KAAG;AAC3BZ,EAAAA,IAAI,EAAEY,KAAK,CAACZ;AADe,CAAH,CAA5B;;AAGA,eAAeP,OAAO,CAACkB,gBAAD,EAAkB;AAAChB,EAAAA;AAAD,CAAlB,CAAP,CAAoCI,IAApC,CAAf","sourcesContent":["import React , { Fragment, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect } from 'react-redux';\r\nimport Spinner from '../layout/Spinner';\r\nimport { getPost } from '../../actions/post';\r\nimport PostItem from '../posts/PostItem';\r\nimport CommentForm from './CommentForm';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Post = ({ getPost , post:{ post, loading}, match }) => {\r\n    console.log(post);\r\n    useEffect(() =>{\r\n        getPost(match.params.id);\r\n    },[getPost]);\r\n   \r\n   \r\n   \r\n   return post!=null ? (<Fragment> \r\n   <Link to='/posts' className='btn'>\r\n       Back To Posts\r\n   </Link>\r\n   <PostItem post = {post}  showActions = {false} /> \r\n   \r\n   </Fragment>) : <Spinner/>\r\n   \r\n};\r\n\r\nPost.propTypes = {\r\n    getPost:PropTypes.func.isRequired,\r\n    post:PropTypes.object.isRequired\r\n};\r\nconst mapStatesToProps=state=>({\r\n    post: state.post\r\n});\r\nexport default connect(mapStatesToProps,{getPost})(Post);"]},"metadata":{},"sourceType":"module"}