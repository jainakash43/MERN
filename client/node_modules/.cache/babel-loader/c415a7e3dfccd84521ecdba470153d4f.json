{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types';\nimport setAuthToken from '../util/setAuthToken'; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    console.log(\"post\");\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Login user\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // LOGOUT / CLEAR PROFILE\n\nexport const logout = () => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/Akash Jain/Desktop/MERN/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","setAuthToken","register","name","email","password","dispatch","config","headers","body","JSON","stringify","res","post","console","log","type","payload","data","loadUser","err","errors","response","forEach","error","msg","localStorage","token","get","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { setAlert } from './alert';\r\nimport {\r\n     REGISTER_SUCCESS,\r\n     REGISTER_FAIL, \r\n     USER_LOADED,\r\n     AUTH_ERROR,\r\n     LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT} from './types';\r\nimport setAuthToken from '../util/setAuthToken';\r\n\r\n\r\n\r\n// Register User\r\nexport const register = ({name, email, password}) => async dispatch =>{\r\n    const config = {\r\n        headers: {\r\n            'Content-Type':'application/json',\r\n        }\r\n    }\r\n\r\n    const body  = JSON.stringify({name,email,password});\r\n    \r\n    try \r\n    {\r\n         const res = await axios.post('/api/users',body, config);\r\n         console.log(\"post\")\r\n         dispatch({\r\n             type: REGISTER_SUCCESS,\r\n             payload: res.data\r\n         }); \r\n         dispatch(loadUser());            \r\n           \r\n    }\r\n    catch(err)\r\n    {\r\n       const errors =  err.response.data.errors;\r\n       if(errors)\r\n       {\r\n           errors.forEach(error => dispatch(setAlert(error.msg,'danger')));\r\n       }\r\n        dispatch({\r\n            type: REGISTER_FAIL\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n//Load User\r\n\r\nexport const loadUser = () =>  async dispatch =>{\r\n \r\n    if(localStorage.token){\r\n        setAuthToken(localStorage.token);\r\n    }\r\n\r\n    try\r\n    {\r\n        const res = await axios.get('/api/auth');\r\n       \r\n        dispatch({\r\n            type: USER_LOADED,\r\n            payload: res.data        \r\n        });\r\n    }\r\n    catch(err){\r\n        dispatch({\r\n            type: AUTH_ERROR\r\n        })\r\n    }\r\n}\r\n\r\n//Login user\r\nexport const login = ( email, password) => async dispatch =>{\r\n    const config = {\r\n        headers: {\r\n            'Content-Type':'application/json',\r\n        }\r\n    }\r\n\r\n    const body  = JSON.stringify({email,password});\r\n    \r\n    try \r\n    {\r\n         const res = await axios.post('/api/auth',body, config);\r\n         dispatch({\r\n             type: LOGIN_SUCCESS,\r\n             payload: res.data\r\n         }); \r\n            \r\n         dispatch(loadUser());  \r\n    }\r\n    catch(err)\r\n    {\r\n       const errors =  err.response.data.errors;\r\n       if(errors)\r\n       {\r\n           errors.forEach(error => dispatch(setAlert(error.msg,'danger')));\r\n       }\r\n        dispatch({\r\n            type: LOGIN_FAIL\r\n        });\r\n    }\r\n\r\n};\r\n\r\n// LOGOUT / CLEAR PROFILE\r\n\r\nexport const  logout = () => {\r\n    \r\n\r\n     dispatch({type : LOGOUT});\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}